<?xml version='1.0' encoding='utf-8'?>
<snippets language="cpp">
  <snippet>
    <tag>union_find</tag>
    <description>Union-Find</description>
    <text><![CDATA[
class union_find{
    //0-indexed
    int n;
    vector<int> a,size;
public:
    union_find(int n):n(n){
        //Initially every element is its own representative.
        a.reserve(n);
        size.reserve(n);
        int i;
        rep(i,0,n){
            a.pb(i);
            size.pb(1);
        }
    }
    
    /*
     * Set and return the representative of the
     * set to which index x belongs. 
     */
    int find(int x){
        int p=x;
        while(p!=a[p])
            p=a[p];
        while(x!=p){
            a[x]=p;
            x=a[x];
        }
        return p;
    }
    
    /*
     * Unite set with child element to
     * set with parent element.
     * return true if union was done
     * return false if already part of same set
     */
    bool unite(int parent,int child){
        parent=find(parent);
        child =find(child);
        if(child==parent)
            return false;
        else{
            a[child]=parent;
            size[parent]+=size[child];
            return true;
        }
    }
    
    /*
     * Unite the two disjoint sets setting 
     * any as representative. Here we use size 
     * heuristic to unite more efficiently.
     */
    bool unite_unordered(int a,int b){
        a = find(a);
        b = find(b);
        if(size[a]>size[b])
            return unite(a,b);
        else
            return unite(b,a);
    }
};
]]></text>
  </snippet>
</snippets>
