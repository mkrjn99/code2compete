<?xml version='1.0' encoding='utf-8'?>
<snippets language="cpp">
  <snippet>
    <tag>matrix</tag>
    <description>Matrix</description>
    <text><![CDATA[

namespace matrix{
    template<class T,int m,int n> class Matrix{
        typedef Matrix<T,m,n> this_type;
    public:
        vector<vector<T> > a;
        Matrix(){ //Initializes matrix to 0
            a.resize(m);
            int i;
            rep(i,0,m){
                a[i].resize(n);
                fill(a[i].begin(), a[i].end(), 0);
            }
        }
        Matrix(const vector<T> &a){ //Initializes in row major form
            assert(a.size()==m*n);
            this->a.resize(m);
            int i,j,k=0;
            rep(i,0,m){
                this->a[i].resize(n);
                rep(j,0,n)
                    this->a[i][j]=a[k++];
            }
        }
        Matrix(const vector<vector<T> > &a){
            //Initializes as it is
            assert(a.size()==m);
            int i;
            rep(i,0,m)
                assert(a[i].size()==n);
            this->a=a;
        }
        template<int p> Matrix<T,m,p> operator*(const Matrix<T,n,p> &b)const{
            Matrix<T,m,p> res;
            int i,j,k;
            rep(i,0,m){
                rep(j,0,n){
                    rep(k,0,p){
                        res.a[i][k]=(res.a[i][k]+a[i][j]*b.a[j][k]);
                    }
                }
            }
            return res;
        }
        void print(){
            int i,j;
            rep(i,0,m){
                rep(j,0,n){
                    cout<<a[i][j]<<' ';
                }
                cout<<endl;
            }
        }
        this_type operator%(const T mod)const{
            this_type t=*this;
            int i,j;
            rep(i,0,m){
                rep(j,0,n){
                    t.a[i][j]%=mod;
                }
            }
            return t;
        }
        void operator=(const this_type &b){
            a=b.a;
        }
    };
    template<class T,int d> class SquareMatrix : public Matrix<T,d,d>{
        typedef Matrix<T,d,d> super_type;
        typedef SquareMatrix<T,d> this_type;
    public:
        SquareMatrix(T x):super_type(){
            //Initializes to xI where I is identity matrix
            int i;
            rep(i,0,d)
                this->a[i][i]=x;
        }
        SquareMatrix(const vector<T> &a):super_type(a){
            //Initializes in row major form
        }
        SquareMatrix(const vector<vector<T> > &a):super_type(a){
            //Initializes as it is
        }
        template<int p> Matrix<T,d,p> operator*(const Matrix<T,d,p> &b)const{
            return super_type(*this)*b;
        }
        void operator*=(const this_type &b){
            static Matrix<T,d,d> m;
            int i,j,k;
            rep(i,0,d){
                rep(j,0,d){
                    m.a[i][j]=0;
                    rep(k,0,d){
                        m.a[i][j]=(m.a[i][j]+this->a[i][k]*b.a[k][j]);
                    }
                }
            }
            swap(m.a,this->a);
        }
        this_type operator%(const T mod)const{
            this_type t=*this;
            int i,j;
            rep(i,0,d){
                rep(j,0,d){
                    t.a[i][j]%=mod;
                }
            }
            return t;
        }
        void operator%=(const T mod){
            int i,j;
            rep(i,0,d){
                rep(j,0,d){
                    this->a[i][j]%=mod;
                }
            }
        }
        void operator=(const super_type &b){
            this->a=b.a;
        }
    };
};
]]></text>
  </snippet>
</snippets>
